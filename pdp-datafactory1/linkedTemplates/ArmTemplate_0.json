{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "pdp-datafactory1"
		},
		"5928AzureDataLakeStorage_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of '5928AzureDataLakeStorage'"
		},
		"6063_Dest_blob_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of '6063_Dest_blob'"
		},
		"6063_src_blob_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of '6063_src_blob'"
		},
		"5928Localfilesystem_password": {
			"type": "secureString",
			"metadata": "Secure string for 'password' of '5928Localfilesystem'"
		},
		"5928AzureDataLakeStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pradeepadls.dfs.core.windows.net"
		},
		"6063_Dest_blob_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pradeepadls.dfs.core.windows.net"
		},
		"6063_src_blob_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://pradeepadls.dfs.core.windows.net"
		},
		"5928Localfilesystem_properties_typeProperties_host": {
			"type": "string",
			"defaultValue": "C:\\Users\\pradadmin\\Desktop\\sourcedata"
		},
		"5928Localfilesystem_properties_typeProperties_userId": {
			"type": "string",
			"defaultValue": "pradadmin"
		},
		"6063_Eventtrigger_properties_File Copy_parameters_SourceFile": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"6063_Eventtrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/4252b742-3cd4-47a1-af43-30bb66d77529/resourceGroups/pradeep/providers/Microsoft.Storage/storageAccounts/pradeepadls"
		},
		"Az_EventTrig_properties_File Copy_parameters_SourceFile": {
			"type": "string",
			"defaultValue": "@triggerBody().fileName"
		},
		"Az_EventTrig_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/4252b742-3cd4-47a1-af43-30bb66d77529/resourceGroups/pradeep/providers/Microsoft.Storage/storageAccounts/pradeepadls"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Send_Notification')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Send_email",
						"type": "WebActivity",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"url": "https://prod-02.southeastasia.logic.azure.com:443/workflows/c09844739c1c4361b53baf1591347584/triggers/manual/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2Fmanual%2Frun&sv=1.0&sig=hYJkdMsw1XTgls6k_D9rO_K81Sjyz2T66OuAe2K_fMQ",
							"method": "POST",
							"headers": {
								"Content-Type": "application/json"
							},
							"body": {
								"DataFactoryName": "@{pipeline().DataFactory}",
								"PipelineName": "@{pipeline().Pipeline}",
								"Subject": "@{pipeline().parameters.Subject}",
								"ErrorMessage": "@{pipeline().parameters.ErrorMessage}",
								"EmailTo": "@pipeline().parameters.EmailTo"
							}
						}
					}
				],
				"parameters": {
					"EmailTo": {
						"type": "string",
						"defaultValue": "No email sent"
					},
					"ErrorMessage": {
						"type": "string",
						"defaultValue": "No email sent"
					},
					"Subject": {
						"type": "string",
						"defaultValue": "No email sent"
					}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/5928AzureDataLakeStorage')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('5928AzureDataLakeStorage_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('5928AzureDataLakeStorage_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/6063_Dest_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('6063_Dest_blob_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('6063_Dest_blob_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/6063_src_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('6063_src_blob_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('6063_src_blob_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/onpremir')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/5928destfile')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "5928AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "moviesresult",
						"fileSystem": "dest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/5928AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_ds_6063')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "6063_Dest_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "image",
						"fileSystem": "dest"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/6063_Dest_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesdataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "5928AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileSystem": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "Rotton Tomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/5928AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_ds_6063')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "6063_src_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string",
						"defaultValue": "@pipeline().parameters.SourceFile"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"folderPath": "nsrc_image",
						"fileSystem": "source"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/6063_src_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/5928Localfilesystem')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "FileServer",
				"typeProperties": {
					"host": "[parameters('5928Localfilesystem_properties_typeProperties_host')]",
					"userId": "[parameters('5928Localfilesystem_properties_typeProperties_userId')]",
					"password": {
						"type": "SecureString",
						"value": "[parameters('5928Localfilesystem_password')]"
					}
				},
				"connectVia": {
					"referenceName": "onpremir",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/onpremir')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviesdb2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "5928AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "raw",
						"fileSystem": "movies"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movieId",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/5928AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/moviefinalsink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "5928AzureDataLakeStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "moviesresult",
						"fileSystem": "dest"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/5928AzureDataLakeStorage')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/File Copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "6063_Copydata",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "src_ds_6063",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "@pipeline().parameters.SourceFile"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_ds_6063",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"parameters": {
					"SourceFile": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_ds_6063')]",
				"[concat(variables('factoryId'), '/datasets/dst_ds_6063')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/5928sourcedataset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "5928Localfilesystem",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "FileServerLocation"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "rank",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "company.founded",
						"type": "String"
					},
					{
						"name": "company.name",
						"type": "String"
					},
					{
						"name": "company.relationship",
						"type": "String"
					},
					{
						"name": "company.sector",
						"type": "String"
					},
					{
						"name": "company.type",
						"type": "String"
					},
					{
						"name": "demographics.age",
						"type": "String"
					},
					{
						"name": "demographics.gender",
						"type": "String"
					},
					{
						"name": "location.citizenship",
						"type": "String"
					},
					{
						"name": "location.country code",
						"type": "String"
					},
					{
						"name": "location.gdp",
						"type": "String"
					},
					{
						"name": "location.region",
						"type": "String"
					},
					{
						"name": "wealth.type",
						"type": "String"
					},
					{
						"name": "wealth.worth in billions",
						"type": "String"
					},
					{
						"name": "wealth.how.category",
						"type": "String"
					},
					{
						"name": "wealth.how.from emerging",
						"type": "String"
					},
					{
						"name": "wealth.how.industry",
						"type": "String"
					},
					{
						"name": "wealth.how.inherited",
						"type": "String"
					},
					{
						"name": "wealth.how.was founder",
						"type": "String"
					},
					{
						"name": "wealth.how.was political",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/5928Localfilesystem')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "moviesdataset",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "5928destfile",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "Filteryrs"
						},
						{
							"name": "AggregateComedyRatings"
						}
					],
					"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 100) ~> MoviesDB\nMoviesDB filter(toInteger(year) >= 1910 && toInteger(year) <=2010 && rlike(genres, 'Comedy')) ~> Filteryrs\nFilteryrs aggregate(groupBy(year),\n\taggregatetoyear = avg(toInteger(Rating))) ~> AggregateComedyRatings\nAggregateComedyRatings sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/moviesdataset')]",
				"[concat(variables('factoryId'), '/datasets/5928destfile')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Movieprocessing')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "moviesdataset",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						},
						{
							"dataset": {
								"referenceName": "moviesdb2",
								"type": "DatasetReference"
							},
							"name": "MovieDB2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "moviefinalsink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "moviefilter"
						},
						{
							"name": "movieselect"
						},
						{
							"name": "MovieJoin"
						},
						{
							"name": "Moviefilter2"
						}
					],
					"script": "source(output(\n\t\tmovie as string,\n\t\ttitle as string,\n\t\tgenres as string,\n\t\tyear as string,\n\t\tRating as string,\n\t\t{Rotton Tomato} as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tlimit: 100) ~> MoviesDB\nsource(output(\n\t\tmovieId as string,\n\t\ttitle as string,\n\t\tgenres as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false) ~> MovieDB2\nMoviesDB filter(rlike(genres, 'Action')) ~> moviefilter\nmoviefilter select(mapColumn(\n\t\tmovieid = movie\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> movieselect\nmovieselect, MovieDB2 join(movieselect@movieid == MovieDB2@movieId,\n\tjoinType:'inner',\n\tbroadcast: 'none')~> MovieJoin\nMovieJoin select(mapColumn(\n\t\tmovieid = movieselect@movieid,\n\t\ttitle,\n\t\tgenres\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> Moviefilter2\nMoviefilter2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/moviesdataset')]",
				"[concat(variables('factoryId'), '/datasets/moviesdb2')]",
				"[concat(variables('factoryId'), '/datasets/moviefinalsink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/On Prem Pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Azure onprem Copy Activity",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "FileServerReadSettings",
									"recursive": true,
									"wildcardFileName": "*"
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "5928sourcedataset",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "5928destfile",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Send_Notification",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Azure onprem Copy Activity",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send_Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EmailTo": "ppradeep2008@gmail.com",
								"ErrorMessage": "It is a success",
								"Subject": "Success"
							}
						}
					},
					{
						"name": "Send_Notification_failure",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Azure onprem Copy Activity",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Send_Notification",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {
								"EmailTo": "ppradeep2008@gmail.com",
								"ErrorMessage": "It is a failure ",
								"Subject": "Job failed"
							}
						}
					}
				],
				"parameters": {
					"StartDt": {
						"type": "string"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/5928sourcedataset')]",
				"[concat(variables('factoryId'), '/datasets/5928destfile')]",
				"[concat(variables('factoryId'), '/pipelines/Send_Notification')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Movie_Transformation",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "dataflow1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDB": {},
									"sink1": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							}
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/dataflow1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/6063_Eventtrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "File Copy",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceFile": "[parameters('6063_Eventtrigger_properties_File Copy_parameters_SourceFile')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/source/blobs/nsrc_image",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('6063_Eventtrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/File Copy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Az_EventTrig')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "File Copy",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceFile": "[parameters('Az_EventTrig_properties_File Copy_parameters_SourceFile')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/source/blobs/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Az_EventTrig_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/File Copy')]"
			]
		}
	]
}